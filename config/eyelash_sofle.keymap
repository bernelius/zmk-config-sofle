#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&mmv {
    time-to-max-speed-ms = <0>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_enter {
            timeout-ms = <30>;
            key-positions = <34 35>;
            bindings = <&kp ENTER>;
        };
        compatible = "zmk,combos";
        combo_inside_parens {
            timeout-ms = <30>;
            key-positions = <47 48>;
            bindings = <&parens_inside>;
        };
        compatible = "zmk,combos";
        combo_inside_brackets {
            timeout-ms = <30>;
            key-positions = <29 30>;
            bindings = <&brackets_inside>;
        };
        compatible = "zmk,combos";
        combo_inside_braces {
            timeout-ms = <30>;
            key-positions = <42 43>;
            bindings = <&braces_inside>;
        };
    };
    behaviors {
        lpar_rpar: leftparenthesis_rightparenthesis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp RPAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lbkt_rbkt: leftbracket_rightbracket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp RBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lbrc_rbrc: leftbrace_rightbrace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp RBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
    macros {
        parens_inside: parens_inside {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LPAR &kp RPAR &kp LEFT_ARROW>;
        };
        brackets_inside: brackets_inside {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LBKT &kp RBKT &kp LEFT_ARROW>;
        };
        braces_inside: braces_inside {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LBRC &kp RBRC &kp LEFT_ARROW>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp GRAVE        &kp N1     &kp N2        &kp N3        &kp N4  &kp N5       &kp UP_ARROW     &kp N6     &kp N7         &kp N8     &kp N9           &kp N0      &kp EQUAL
&kp TAB          &kp Q      &kp W         &kp E         &kp R   &kp T        &kp DOWN_ARROW   &kp Y      &kp U          &kp I      &kp O            &kp P       &kp BSLH
&mt LCTRL ESC    &kp A      &kp S         &kp D         &kp F   &kp G        &kp LEFT_ARROW   &kp H      &kp J          &kp K      &kp L            &kp SEMI    &kp APOS
&kp LSHFT        &kp Z      &kp X         &kp C         &kp V   &kp B        &kp RIGHT_ARROW  &kp N      &kp M          &kp COMMA  &kp DOT          &kp FSLH    &kp RIGHT_SHIFT
&trans           &kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT  &mo 1   &kp ENTER    &kp ENTER        &kp SPACE  &kp BACKSPACE  &to 2      &kp RIGHT_SHIFT  &kp DELETE
                 >;

            display-name = "wat";
        };

        layer_1 {
            bindings = <
&kp GRAVE   &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9     &kp F10           &trans
&trans      &kp GRAVE        &mkp LCLK       &mkp MCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP        &kp END          &kp UP      &kp HOME   &kp MINUS         &kp EQUAL
&trans      &kp N1           &kp N2          &kp N3           &kp N4           &kp N5             &mmv MOVE_LEFT   &kp N6           &kp N7           &kp N8      &kp N9     &kp N0            &kp RIGHT_BRACKET
&trans      &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11    &kp F12           &trans
&trans      &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &kp RIGHT_SHIFT  &trans           &trans      &trans     &trans
            >;

            display-name = "layer1";
        };

        layer_2 {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6  &kp F7  &kp F8      &kp F9     &kp F10      &trans
&trans     &trans        &trans          &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &kp F11     &kp F12    &kp UNDER    &kp PLUS
&trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
&trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans     &trans        &trans          &trans        &to 0         &trans          &mkp LCLK        &trans  &trans  &trans      &trans     &trans
            >;

        };

        layer_3 {
            bindings = <
&trans     &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6  &kp F7  &kp F8      &kp F9     &kp F10      &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &kp F11     &kp F12    &kp UNDER    &kp PLUS
&trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
&trans     &trans        &trans          &trans        &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans  &trans      &trans     &trans       &trans
&trans     &trans        &trans          &trans        &to 0         &trans          &mkp LCLK        &trans  &trans  &trans      &trans     &trans
            >;
        };
    };
};
